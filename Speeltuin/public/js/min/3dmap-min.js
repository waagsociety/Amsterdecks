function onWindowResize(){camera.aspect=container.clientWidth/container.clientHeight,camera.updateProjectionMatrix(),renderer.setSize(container.clientWidth,container.clientHeight),controls.handleResize(),render()}function animate(){requestAnimationFrame(animate),render(),controls.update()}function render(){var e=clock.getDelta();uniforms.time.value+=5*e,renderer.render(scene,camera)}function init(){container=document.getElementById("map"),camera=new THREE.PerspectiveCamera(70,container.clientWidth/container.clientHeight,.1,1e4),camera.position.z=Math.min(container.clientWidth,container.clientHeight),controls=new THREE.TrackballControls(camera,container),controls.rotateSpeed=1,controls.zoomSpeed=1.2,controls.panSpeed=.8,controls.noZoom=!1,controls.noPan=!1,controls.staticMoving=!0,controls.dynamicDampingFactor=.3,controls.keys=[65,83,68],controls.addEventListener("change",render),scene=new THREE.Scene,light=new THREE.DirectionalLight(16777215),light.position.set(1,1,1),scene.add(light),spotLight=new THREE.SpotLight(16777215),spotLight.position.set(-1e3,-1e3,1e3),spotLight.castShadow=!0,scene.add(spotLight),ambientLight=new THREE.AmbientLight(3355443),scene.add(ambientLight),renderer=new THREE.WebGLRenderer({antialias:!0}),renderer.setPixelRatio(window.devicePixelRatio),renderer.setSize(container.clientWidth,container.clientHeight),container.appendChild(renderer.domElement),renderer.shadowMapEnabled=!0,renderer.shadowMapSoft=!0,renderer.shadowCameraNear=1,renderer.shadowCameraFar=camera.far,renderer.shadowCameraFov=60,renderer.shadowMapBias=.0025,renderer.shadowMapDarkness=.5,renderer.shadowMapWidth=1024,renderer.shadowMapHeight=1024,window.addEventListener("resize",onWindowResize,!1),onWindowResize(),render(),update()}function clearGroups(){json&&("FeatureCollection"===json.type?json.features.forEach(function(e){scene.remove(e._group)}):"Topology"===json.type&&Object.keys(json.objects).forEach(function(e){json.objects[e].geometries.forEach(function(e){scene.remove(e._group)})})),render()}function update(){clearGroups();var e=container.clientWidth,n=container.clientHeight,t="data/water.amsterdam.json";d3.json(t,function(t){json=t;var o={};if("FeatureCollection"===json.type){var r=getProjection(json,e,n);json.features.forEach(function(e){var n=addFeature(e,r,o);e._group=n})}else if("Topology"===json.type){var a=topojson.merge(json,json.objects[Object.keys(json.objects)[0]].geometries),r=getProjection(a,e,n);Object.keys(json.objects).forEach(function(e){json.objects[e].geometries.forEach(function(e){var n=topojson.feature(json,e),t=addFeature(n,r,o);e._group=t})})}else console.log("This tutorial only renders TopoJSON and GeoJSON FeatureCollections");render()})}function addShape(e,n,t,o,r,a,i,s,c,d,l,h){var g=new THREE.ExtrudeGeometry(n,t),m=new THREE.Mesh(g,o);m.castShadow=!1,m.receiveShadow=!1,m.position.set(a,i,s),m.rotation.set(c,d,l),m.scale.set(h,h,h),e.add(m)}function addFeature(e,n,t){var o=new THREE.Group;scene.add(o);var r,a,i={amount:5,bevelEnabled:!1};if("Polygon"===e.geometry.type){var s=createPolygonShape(e.geometry.coordinates,n);addShape(o,s,i,materials,r,0,0,1,Math.PI,0,0,1)}else"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach(function(e){var t=createPolygonShape(e,n);addShape(o,t,i,materials,r,0,0,1,Math.PI,0,0,1)}):console.log("This tutorial only renders Polygons and MultiPolygons");return o}Detector.webgl||Detector.addGetWebGLMessage();var clock=new THREE.Clock,json,defaults={url:"data/water.amsterdam.json"};uniforms={time:{type:"f",value:1},resolution:{type:"v2",value:new THREE.Vector2}};var materials=new THREE.ShaderMaterial({uniforms:uniforms,vertexShader:document.getElementById("vertexshader").textContent,fragmentShader:document.getElementById("fragmentshader").textContent});Detector.webgl||Detector.addGetWebGLMessage();var container,camera,controls,scene,renderer,light,spotLight,ambientLight;window.onhashchange=function(){disableHashChange||parseHash(location.hash.substring(1))},location.hash&&parseHash(location.hash.substring(1)),$(".views .3dmap").click(function(){init(),animate()});